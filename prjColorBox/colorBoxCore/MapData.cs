using System.Collections.Generic;
using System.Linq; // Нужен для удобной работы с коллекциями (сортировка, выборка).

namespace prjColorBox // Группирует связанные классы.
{
    // Класс MapData: основная структура для хранения состояния сгенерированной игровой карты.
    // Он объединяет саму карту (сетку цветов) и информацию о том, какие цвета и в каком количестве на ней присутствуют.
    public class MapData
    {
        // Свойство Grid: представляет собой игровую карту в виде сетки.
        // Это массив массивов (int[][]), где каждое число - это идентификатор цвета в соответствующей ячейке.
        // Например, Grid[0][1] - цвет во второй ячейке первой строки.
        // Свойство "только для чтения" (get;) после инициализации в конструкторе.
        public int[][] Grid { get; }

        // Свойство ColorCounts: хранит статистику по цветам на карте.
        // Это словарь (Dictionary<int, int>), где:
        //   - Ключ (int): уникальный идентификатор цвета (например, 1 для красного, 2 для синего).
        //   - Значение (int): сколько раз этот цвет встречается на карте (количество ячеек с этим цветом).
        // Позволяет быстро узнать, сколько ячеек у каждого цвета.
        public Dictionary<int, int> ColorCounts { get; }

        // Свойство SortedColorIDsByFrequency: ключевой элемент для логики игры.
        // Это список (List<int>) идентификаторов цветов, отсортированных по убыванию их частоты встречаемости на карте.
        // То есть, первый элемент списка - это ID самого частого цвета, второй - следующего по частоте, и так далее.
        // Этот список используется для проверки правильности действий игрока.
        public List<int> SortedColorIDsByFrequency { get; }

        // Конструктор MapData: вызывается для создания нового объекта MapData.
        // Он принимает сгенерированную карту (grid) и подсчитанные количества цветов (colorCounts).
        public MapData(int[][] grid, Dictionary<int, int> colorCounts)
        {
            // Сохраняем переданные данные в свойствах объекта.
            Grid = grid;
            ColorCounts = colorCounts;

            // Самая важная часть конструктора: вычисление SortedColorIDsByFrequency.
            // Используется LINQ для обработки словаря ColorCounts:
            SortedColorIDsByFrequency = ColorCounts
                .OrderByDescending(kvp => kvp.Value) // Сортируем пары (ID_цвета, Количество) из словаря ColorCounts
                                                     // по убыванию Количества (kvp.Value). Самые частые цвета оказываются наверху.
                .Select(kvp => kvp.Key)               // Из отсортированных пар выбираем только Ключи (ID_цвета).
                .ToList();                            // Преобразуем полученную последовательность ID цветов в обычный Список.
        }
    }
}